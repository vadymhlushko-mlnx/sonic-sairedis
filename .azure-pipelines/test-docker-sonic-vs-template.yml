parameters:
- name: timeout
  type: number
  default: 360

- name: log_artifact_name
  type: string

- name: docker_sonic_vs_name
  type: string
  default: docker-sonic-vs

- name: asan
  type: boolean
  default: false

jobs:
- job:
  displayName: vstest
  timeoutInMinutes: ${{ parameters.timeout }}

  steps:
  - script: |
      ls -A1 | xargs -I{} sudo rm -rf {}
    displayName: "Clean workspace"
  - checkout: self
    clean: true
    displayName: "Checkout sonic-sairedis"
  - checkout: sonic-swss
    clean: true
    displayName: "Checkout sonic-swss"
  - script: |
      set -ex
      cd sonic-swss
      git checkout $(BUILD_BRANCH)
    displayName: Set up sonic-swss branch
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: ${{ parameters.docker_sonic_vs_name }}
      path: $(Build.ArtifactStagingDirectory)/download
    displayName: "Download pre-stage built ${{ parameters.docker_sonic_vs_name }}"
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: build
      pipeline: Azure.sonic-swss-common
      artifact: sonic-swss-common.amd64.ubuntu20_04
      path: $(Build.ArtifactStagingDirectory)/download
      runVersion: 'latestFromBranch'
      runBranch: 'refs/heads/$(BUILD_BRANCH)'
      allowPartiallySucceededBuilds: true
    displayName: "Download sonic swss common deb packages"

  - script: |
      set -ex
      sudo sonic-sairedis/.azure-pipelines/build_and_install_module.sh

      sudo apt-get update
      sudo apt-get install -y libhiredis0.14 libyang0.16
      sudo dpkg -i --force-confask,confnew $(Build.ArtifactStagingDirectory)/download/libswsscommon_1.0.0_amd64.deb || apt-get install -f
      sudo dpkg -i $(Build.ArtifactStagingDirectory)/download/python3-swsscommon_1.0.0_amd64.deb

      # install packages for vs test
      sudo apt-get install -y net-tools bridge-utils vlan
      sudo apt-get install -y python3-pip
      sudo pip3 install pytest==4.6.2 attrs==19.1.0 exabgp==4.0.10 distro==1.5.0 docker>=4.4.1 redis==3.3.4 flaky==3.7.0
    displayName: "Install dependencies"

  - script: |
      set -ex
      sudo docker load -i $(Build.ArtifactStagingDirectory)/download/docker-sonic-vs.gz
      docker ps
      ip netns list
      pushd sonic-swss/tests
      params=''
      if [ '${{ parameters.asan }}' == True ]; then
        params='--graceful-stop'
      fi
      all_tests=$(ls test_*.py)
      all_tests="${all_tests} p4rt"
      test_set=()
      # Run 20 tests as a set.
      for test in ${all_tests}; do
        test_set+=("${test}")
        if [ ${#test_set[@]} -ge 20 ]; then
          test_name=$(echo "${test_set[0]}" | cut -d "." -f 1)
          echo "${test_set[*]}" | xargs sudo py.test -v --force-flaky --junitxml="${test_name}_tr.xml" $params --imgname=docker-sonic-vs:$(Build.DefinitionName).$(Build.BuildNumber).asan-${{ parameters.asan }}
          test_set=()
        fi
      done
      if [ ${#test_set[@]} -gt 0 ]; then
        test_name=$(echo "${test_set[0]}" | cut -d "." -f 1)
        echo "${test_set[*]}" | xargs sudo py.test -v --force-flaky --junitxml="${test_name}_tr.xml" $params --imgname=docker-sonic-vs:$(Build.DefinitionName).$(Build.BuildNumber).asan-${{ parameters.asan }}
      fi
      rm -rf $(Build.ArtifactStagingDirectory)/download
    displayName: "Run vs tests"
    ${{ if or(ne(variables['Build.Reason'], 'PullRequest'), eq(parameters.asan, true)) }}:
      continueOnError: true

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/tr.xml'
      testRunTitle: vstest
    condition: always()

  - script: |
      cp -r sonic-swss/tests/log $(Build.ArtifactStagingDirectory)/
      if [ '${{ parameters.asan }}' == True ]; then
        cp -vr sonic-swss/tests/log/*/log/asan $(Build.ArtifactStagingDirectory)/
      fi
    displayName: "Collect logs"
    condition: always()

  - publish: $(Build.ArtifactStagingDirectory)/
    artifact: ${{ parameters.log_artifact_name }}@$(System.JobAttempt)
    displayName: "Publish logs"
    condition: always()

  - publish: $(Build.ArtifactStagingDirectory)/asan
    artifact: asan-reports
    displayName: "Publish ASAN reports"
    condition: eq('${{ parameters.asan }}', true)

  - script: |
      if [ "$(ls -A $(Build.ArtifactStagingDirectory)/asan)" ]; then
        echo "There are issues reported by ASAN"
        exit 1
      else
        echo "No issues reported by ASAN"
      fi
    displayName: "Check ASAN reports"
    condition: eq('${{ parameters.asan }}', true)
    continueOnError: true
